# Iterable
# -> An object that can be looped over.
# -> It has the __iter__() method.
# -> Returns an iterator object when it uses __iter__()

# Iterator
# -> An object generated by using iter() on an iterable.
# -> It has a state where it knows where it is during iteration.
# -> It has the __iter__() and __next__() method.
# -> Returns self when it uses __iter__()


nums = [1, 2, 3]  # iterable
i_nums = iter(nums)  # iterator
# i_nums = nums.__iter__() # another way to create an iterator

# print(next(i_nums))
# print(next(i_nums))
# print(next(i_nums))
# print(next(i_nums))

# For-loop works like this at the backend
while True:
    try:
        item = next(i_nums)
        print(item)
    except StopIteration:
        break
